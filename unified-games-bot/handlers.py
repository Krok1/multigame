import logging
import requests
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
from keyboards import (
    get_main_menu_keyboard,
    get_buckshot_menu_keyboard,
    get_blackjack_menu_keyboard,
    get_back_keyboard,
    get_webapp_keyboard,
    get_language_keyboard
)
from localization import get_text
from models import get_user_language, create_or_update_user, update_user_language

logger = logging.getLogger(__name__)
router = Router()

class GameStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –≥—Ä–∏"""
    selecting_game = State()
    selecting_mode = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    from models import SessionLocal
    db = SessionLocal()
    try:
        user = create_or_update_user(
            db, 
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        locale = user.language
    finally:
        db.close()
    
    await message.answer(
        get_text(locale, "bot.welcome"),
        reply_markup=get_main_menu_keyboard(locale)
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    await show_help(message)

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
    locale = get_user_language(None, callback.from_user.id)
    help_text = get_text(locale, "bot.help")
    
    await callback.message.edit_text(help_text, reply_markup=get_back_keyboard(locale))
    await callback.answer()

@router.callback_query(F.data == "rules")
async def show_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞"""
    locale = get_user_language(None, callback.from_user.id)
    rules_text = get_text(locale, "bot.rules")
    
    await callback.message.edit_text(rules_text, reply_markup=get_back_keyboard(locale))
    await callback.answer()

@router.callback_query(F.data == "game_buckshot")
async def buckshot_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é Buckshot Roulette"""
    locale = get_user_language(None, callback.from_user.id)
    await callback.message.edit_text(
        get_text(locale, "games.buckshot.name") + "\n\n" + get_text(locale, "games.buckshot.description"),
        reply_markup=get_buckshot_menu_keyboard(locale)
    )
    await callback.answer()

@router.callback_query(F.data == "game_blackjack")
async def blackjack_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é BlackJack"""
    locale = get_user_language(None, callback.from_user.id)
    await callback.message.edit_text(
        get_text(locale, "games.blackjack.name") + "\n\n" + get_text(locale, "games.blackjack.description"),
        reply_markup=get_blackjack_menu_keyboard(locale)
    )
    await callback.answer()

@router.callback_query(F.data == "rules_buckshot")
async def buckshot_rules(callback: CallbackQuery):
    """–ü—Ä–∞–≤–∏–ª–∞ Buckshot Roulette"""
    locale = get_user_language(None, callback.from_user.id)
    rules_text = get_text(locale, "games.buckshot.rules")
    
    await callback.message.edit_text(rules_text, reply_markup=get_back_keyboard(locale))
    await callback.answer()

@router.callback_query(F.data == "rules_blackjack")
async def blackjack_rules(callback: CallbackQuery):
    """–ü—Ä–∞–≤–∏–ª–∞ BlackJack"""
    locale = get_user_language(None, callback.from_user.id)
    rules_text = get_text(locale, "games.blackjack.rules")
    
    await callback.message.edit_text(rules_text, reply_markup=get_back_keyboard(locale))
    await callback.answer()

@router.callback_query(F.data.startswith("buckshot_"))
async def handle_buckshot_game(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ Buckshot Roulette"""
    game_mode = callback.data.split("_")[1]  # test –∞–±–æ real
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ Buckshot API
        import random
        chat_id = random.randint(100000, 999999)
        
        session_data = {
            "user_id": callback.from_user.id,
            "username": callback.from_user.username or callback.from_user.first_name,
            "mode": game_mode,
            "chat_id": chat_id,
            "stake": 10.0
        }
        
        response = requests.post(
            f"{config.BUCKSHOT_API_URL}/api/sessions",
            json=session_data,
            headers={
                "bypass-tunnel-reminder": "true"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            chat_id = data.get("session", {}).get("chat_id")
            
            webapp_url = f"{config.BUCKSHOT_WEBAPP_URL}?chat_id={chat_id}&mode={game_mode}"
            
            locale = get_user_language(None, callback.from_user.id)
            
            if game_mode == "test":
                message_text = get_text(locale, "games.buckshot.session_created", chat_id=chat_id)
            else:
                message_text = get_text(locale, "games.buckshot.session_created_real", chat_id=chat_id)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text=get_text(locale, "buttons.open_game"),
                web_app={"url": webapp_url}
            ))
            builder.add(InlineKeyboardButton(
                text=get_text(locale, "buttons.invite_player"),
                callback_data=f"invite_buckshot_{chat_id}"
            ))
            builder.add(InlineKeyboardButton(
                text=get_text(locale, "buttons.back"),
                callback_data="back_to_main"
            ))
            builder.adjust(1)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup()
            )
        else:
            locale = get_user_language(None, callback.from_user.id)
            await callback.message.edit_text(
                get_text(locale, "errors.session_creation_failed"),
                reply_markup=get_back_keyboard(locale)
            )
    
    except Exception as e:
        logger.error(f"Error creating Buckshot session: {e}")
        locale = get_user_language(None, callback.from_user.id)
        await callback.message.edit_text(
            get_text(locale, "errors.connection_failed"),
            reply_markup=get_back_keyboard(locale)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("blackjack_create_"))
async def handle_blackjack_create(callback: CallbackQuery):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É BlackJack"""
    game_mode = callback.data.split("_")[2]  # test –∞–±–æ real
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ Flask API
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π chat_id
        import random
        chat_id = random.randint(100000, 999999)
        
        session_data = {
            "user_id": callback.from_user.id,
            "username": callback.from_user.username or callback.from_user.first_name,
            "mode": game_mode,
            "chat_id": chat_id,
            "stake": 10.0  # –°—Ç–∞–≤–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }
        
        response = requests.post(
            f"{config.BLACKJACK_FLASK_API_URL}/api/sessions",
            json=session_data,
            headers={
                "bypass-tunnel-reminder": "true",
                "ngrok-skip-browser-warning": "1"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            chat_id = data.get("session", {}).get("chat_id")
            
            webapp_url = f"{config.BLACKJACK_WEBAPP_URL}/webapp?chat_id={chat_id}"
            
            if game_mode == "test":
                message_text = (
                    "üÉè <b>BlackJack - –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º</b>\n\n"
                    f"üéÆ ID –≥—Ä–∏: <code>{chat_id}</code>\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä—É:"
                )
            else:
                message_text = (
                    "üÉè <b>BlackJack - –†–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ</b>\n\n"
                    f"üéÆ ID –≥—Ä–∏: <code>{chat_id}</code>\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä—É:"
                )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="üéÆ –í—ñ–¥–∫—Ä–∏—Ç–∏ BlackJack",
                web_app={"url": webapp_url}
            ))
            builder.add(InlineKeyboardButton(
                text="üë• –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è",
                callback_data=f"invite_player_{chat_id}"
            ))
            builder.add(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_main"
            ))
            builder.adjust(1)  # –ü–æ –æ–¥–Ω—ñ–π –∫–Ω–æ–ø—Ü—ñ –≤ —Ä—è–¥
            
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_back_keyboard()
            )
    
    except Exception as e:
        logger.error(f"Error creating BlackJack session: {e}")
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("invite_player_"))
async def invite_player(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è –¥–æ –≥—Ä–∏ BlackJack"""
    chat_id = callback.data.split("_")[2]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
    invite_text = (
        f"üéÆ <b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä–∏ BlackJack!</b>\n\n"
        f"üéØ ID –≥—Ä–∏: <code>{chat_id}</code>\n"
        f"üë§ –ó–∞–ø—Ä–æ—à—É—î: {callback.from_user.first_name}\n\n"
        f"üé≤ –©–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏:\n"
        f"1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ\n"
        f"2. –ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ: <code>/join {chat_id}</code>\n\n"
        f"üÉè –ì—Ä–∞—Ç–∏–º—É—Ç—å: 2 –≥—Ä–∞–≤—Ü—ñ\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏",
        callback_data=f"join_game_{chat_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
        callback_data="decline_invite"
    ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        invite_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("invite_buckshot_"))
async def invite_buckshot_player(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è –¥–æ –≥—Ä–∏ Buckshot Roulette"""
    chat_id = callback.data.split("_")[2]
    locale = get_user_language(None, callback.from_user.id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
    invite_text = get_text(locale, "games.buckshot.invite_text", 
                          chat_id=chat_id, creator_name=callback.from_user.first_name)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text=get_text(locale, "buttons.join_game"),
        callback_data=f"join_buckshot_{chat_id}"
    ))
    builder.add(InlineKeyboardButton(
        text=get_text(locale, "buttons.decline"),
        callback_data="decline_invite"
    ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        invite_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("join_game_"))
async def join_game(callback: CallbackQuery):
    """–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏"""
    chat_id = callback.data.split("_")[2]
    
    try:
        # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä–∏ —á–µ—Ä–µ–∑ API
        join_data = {
            "user_id": callback.from_user.id,
            "username": callback.from_user.username or callback.from_user.first_name
        }
        
        response = requests.post(
            f"{config.BLACKJACK_FLASK_API_URL}/api/sessions/{chat_id}/join",
            json=join_data,
            headers={
                "bypass-tunnel-reminder": "true",
                "ngrok-skip-browser-warning": "1"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            webapp_url = f"{config.BLACKJACK_WEBAPP_URL}/webapp?chat_id={chat_id}"
            
            await callback.message.edit_text(
                f"‚úÖ <b>–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏!</b>\n\n"
                f"üéÆ ID –≥—Ä–∏: <code>{chat_id}</code>\n"
                f"üë• –ì—Ä–∞–≤–µ—Ü—å 1: {data.get('player1_username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üë§ –ì—Ä–∞–≤–µ—Ü—å 2: {callback.from_user.first_name}\n\n"
                f"üé≤ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É:",
                reply_markup=get_webapp_keyboard(webapp_url, "üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É")
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏. –ú–æ–∂–ª–∏–≤–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.",
                reply_markup=get_back_keyboard()
            )
    
    except Exception as e:
        logger.error(f"Error joining game: {e}")
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("join_buckshot_"))
async def join_buckshot_game(callback: CallbackQuery):
    """–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏ Buckshot Roulette"""
    chat_id = callback.data.split("_")[2]
    
    try:
        # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä–∏ —á–µ—Ä–µ–∑ Buckshot API
        session_data = {
            "user_id": callback.from_user.id,
            "username": callback.from_user.username or callback.from_user.first_name
        }
        
        response = requests.post(
            f"{config.BUCKSHOT_API_URL}/api/sessions/{chat_id}/join",
            json=session_data,
            headers={
                "bypass-tunnel-reminder": "true"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            webapp_url = f"{config.BUCKSHOT_WEBAPP_URL}?chat_id={chat_id}&mode=test"
            locale = get_user_language(None, callback.from_user.id)
            
            message_text = get_text(locale, "games.buckshot.joined", 
                                  chat_id=chat_id, player_name=callback.from_user.first_name)
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text=get_text(locale, "buttons.open_game"),
                web_app={"url": webapp_url}
            ))
            builder.add(InlineKeyboardButton(
                text=get_text(locale, "buttons.back"),
                callback_data="back_to_main"
            ))
            builder.adjust(1)
            
            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup()
            )
        else:
            locale = get_user_language(None, callback.from_user.id)
            await callback.message.edit_text(
                get_text(locale, "errors.join_failed"),
                reply_markup=get_back_keyboard(locale)
            )
    
    except Exception as e:
        logger.error(f"Error joining Buckshot game: {e}")
        locale = get_user_language(None, callback.from_user.id)
        await callback.message.edit_text(
            get_text(locale, "errors.connection_failed"),
            reply_markup=get_back_keyboard(locale)
        )
    
    await callback.answer()

@router.callback_query(F.data == "decline_invite")
async def decline_invite(callback: CallbackQuery):
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è"""
    locale = get_user_language(None, callback.from_user.id)
    await callback.message.edit_text(
        get_text(locale, "buttons.decline"),
        reply_markup=get_back_keyboard(locale)
    )
    await callback.answer()

@router.callback_query(F.data == "language")
async def language_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤–∏–±–æ—Ä—É –º–æ–≤–∏"""
    locale = get_user_language(None, callback.from_user.id)
    await callback.message.edit_text(
        get_text(locale, "bot.select_language"),
        reply_markup=get_language_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("lang_"))
async def change_language(callback: CallbackQuery):
    """–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    new_language = callback.data.split("_")[1]  # uk, ru, en
    
    # –û–Ω–æ–≤–∏—Ç–∏ –º–æ–≤—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    from models import SessionLocal
    db = SessionLocal()
    try:
        success = update_user_language(db, callback.from_user.id, new_language)
        if success:
            await callback.message.edit_text(
                get_text(new_language, "bot.language_changed"),
                reply_markup=get_main_menu_keyboard(new_language)
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏",
                reply_markup=get_main_menu_keyboard()
            )
    finally:
        db.close()
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    locale = get_user_language(None, callback.from_user.id)
    await callback.message.edit_text(
        get_text(locale, "bot.welcome"),
        reply_markup=get_main_menu_keyboard(locale)
    )
    await callback.answer()

@router.message(Command("join"))
async def cmd_join(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏"""
    if not message.text or len(message.text.split()) < 2:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>/join ID_–≥—Ä–∏</code>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>/join 123456</code>"
        )
        return
    
    try:
        chat_id = int(message.text.split()[1])
    except ValueError:
        await message.answer(
            "‚ùå ID –≥—Ä–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>/join ID_–≥—Ä–∏</code>\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>/join 123456</code>"
        )
        return
    
    try:
        # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—è –¥–æ –≥—Ä–∏ —á–µ—Ä–µ–∑ API
        join_data = {
            "user_id": message.from_user.id,
            "username": message.from_user.username or message.from_user.first_name
        }
        
        response = requests.post(
            f"{config.BLACKJACK_FLASK_API_URL}/api/sessions/{chat_id}/join",
            json=join_data,
            headers={
                "bypass-tunnel-reminder": "true",
                "ngrok-skip-browser-warning": "1"
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            webapp_url = f"{config.BLACKJACK_WEBAPP_URL}/webapp?chat_id={chat_id}"
            
            await message.answer(
                f"‚úÖ <b>–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏!</b>\n\n"
                f"üéÆ ID –≥—Ä–∏: <code>{chat_id}</code>\n"
                f"üë• –ì—Ä–∞–≤–µ—Ü—å 1: {data.get('player1_username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üë§ –ì—Ä–∞–≤–µ—Ü—å 2: {message.from_user.first_name}\n\n"
                f"üé≤ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É:",
                reply_markup=get_webapp_keyboard(webapp_url, "üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É")
            )
        else:
            error_data = response.json()
            error_msg = error_data.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
            await message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏: {error_msg}\n\n"
                "–ú–æ–∂–ª–∏–≤–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î."
            )
    
    except Exception as e:
        logger.error(f"Error joining game: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

@router.message()
async def handle_unknown_message(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    locale = get_user_language(None, message.from_user.id)
    await message.answer(
        get_text(locale, "bot.unknown_message")
    ) 